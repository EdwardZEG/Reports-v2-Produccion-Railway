import { Request, Response, NextFunction } from 'express';
import { migrateToNewStructure, rollbackMigration, validateMigration } from '../services/migrationService';
import { AppError } from '../errors/customErrors';

/**
 * Ejecutar migraci√≥n completa a nueva estructura
 */
export const executeMigration = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    console.log('üöÄ Iniciando migraci√≥n desde controlador...');

    const result = await migrateToNewStructure();

    res.status(200).json({
      success: true,
      message: 'Migraci√≥n completada',
      data: result
    });

  } catch (error: any) {
    console.error('‚ùå Error en migraci√≥n:', error);
    return next(new AppError(`Error en migraci√≥n: ${error.message}`, 500));
  }
};

/**
 * Revertir migraci√≥n (solo para desarrollo)
 */
export const revertMigration = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    if (process.env.NODE_ENV === 'production') {
      return next(new AppError('Rollback no permitido en producci√≥n', 403));
    }

    await rollbackMigration();

    res.status(200).json({
      success: true,
      message: 'Migraci√≥n revertida exitosamente'
    });

  } catch (error: any) {
    console.error('‚ùå Error revirtiendo migraci√≥n:', error);
    return next(new AppError(`Error revirtiendo migraci√≥n: ${error.message}`, 500));
  }
};

/**
 * Validar que la migraci√≥n fue exitosa
 */
export const validateMigrationStatus = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    const isValid = await validateMigration();

    res.status(200).json({
      success: true,
      isValid,
      message: isValid ? 'Migraci√≥n v√°lida' : 'Migraci√≥n con problemas'
    });

  } catch (error: any) {
    console.error('‚ùå Error validando migraci√≥n:', error);
    return next(new AppError(`Error validando migraci√≥n: ${error.message}`, 500));
  }
};